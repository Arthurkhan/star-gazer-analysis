import { supabase } from '@/integrations/supabase/client';
import { BusinessType } from '@/types/businessTypes';
import { EnhancedAnalysis } from '@/types/dataAnalysis';

export interface EmailSettings {
  enabled: boolean;
  recipient: string;
  schedules: {
    weekly: { enabled: boolean; dayOfWeek: number };
    monthly: { enabled: boolean; dayOfMonth: number };
    urgent: { enabled: boolean; minSeverity: number };
  };
  content: {
    includeCharts: boolean;
    includeRecommendations: boolean;
    includeTables: boolean;
  };
}

export interface EmailOptions {
  recipient: string;
  businessName: string;
  businessType: BusinessType;
  subject?: string;
  includeAttachments?: boolean;
}

export interface EmailTemplate {
  subject: string;
  html: string;
}

export async function getEmailSettings(businessName: string): Promise<EmailSettings | null> {
  try {
    const { data, error } = await supabase
      .from('email_settings')
      .select('*')
      .eq('business_name', businessName)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        // No settings found, return null
        return null;
      }
      console.error('Error fetching email settings:', error);
      throw new Error(`Failed to fetch email settings: ${error.message}`);
    }

    return data as EmailSettings;
  } catch (err) {
    console.error('Error in getEmailSettings:', err);
    throw err;
  }
}

export async function saveEmailSettings(businessName: string, settings: EmailSettings): Promise<void> {
  try {
    // Check if settings exist for this business
    const { data: existingSettings } = await supabase
      .from('email_settings')
      .select('id')
      .eq('business_name', businessName)
      .single();

    // Either update existing or insert new
    if (existingSettings) {
      const { error } = await supabase
        .from('email_settings')
        .update({
          ...settings,
          updated_at: new Date().toISOString()
        })
        .eq('business_name', businessName);

      if (error) {
        console.error('Error updating email settings:', error);
        throw new Error(`Failed to update email settings: ${error.message}`);
      }
    } else {
      const { error } = await supabase
        .from('email_settings')
        .insert({
          business_name: businessName,
          ...settings,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      if (error) {
        console.error('Error inserting email settings:', error);
        throw new Error(`Failed to insert email settings: ${error.message}`);
      }
    }
  } catch (err) {
    console.error('Error in saveEmailSettings:', err);
    throw err;
  }
}

export async function sendWeeklySummary(options: EmailOptions, analysisData: EnhancedAnalysis) {
  try {
    const template = generateWeeklySummaryTemplate(options, analysisData);
    
    const { data: result, error } = await supabase.functions.invoke('send-email-summary', {
      body: {
        recipient: options.recipient,
        subject: template.subject,
        html: template.html,
        includeAttachments: options.includeAttachments || false,
      }
    });

    if (error) {
      console.error('Email notification error:', error);
      throw new Error(`Failed to send email: ${error.message}`);
    }

    return result;
  } catch (err) {
    console.error('Email service error:', err);
    throw err;
  }
}

export async function sendUrgentAlert(options: EmailOptions, issue: any) {
  try {
    const subject = `⚠️ URGENT: Issue detected for ${options.businessName}`;
    
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background-color: #FF5252; color: white; padding: 15px; text-align: center;">
          <h1 style="margin: 0;">Urgent Alert</h1>
        </div>
        <div style="padding: 20px; border: 1px solid #ddd; border-top: none;">
          <p>An urgent issue has been detected for <strong>${options.businessName}</strong>:</p>
          <div style="background-color: #FFF8E1; padding: 15px; border-left: 4px solid #FFC107; margin: 15px 0;">
            <h3 style="margin-top: 0;">${issue.title}</h3>
            <p>${issue.description}</p>
            <p><strong>Impact:</strong> ${issue.impact}</p>
          </div>
          <div style="margin-top: 20px;">
            <h3>Recommended Actions:</h3>
            <ul>
              ${issue.recommendations.map((rec: string) => `<li>${rec}</li>`).join('')}
            </ul>
          </div>
          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666;">
            <p>This alert was generated by Star-Gazer Analysis. Log in to your dashboard for more details.</p>
          </div>
        </div>
      </div>
    `;
    
    const { data: result, error } = await supabase.functions.invoke('send-email-summary', {
      body: {
        recipient: options.recipient,
        subject,
        html,
        includeAttachments: false,
      }
    });

    if (error) {
      console.error('Urgent email notification error:', error);
      throw new Error(`Failed to send urgent alert: ${error.message}`);
    }

    return result;
  } catch (err) {
    console.error('Email service error:', err);
    throw err;
  }
}

export async function sendMonthlyPerformance(options: EmailOptions, analysisData: EnhancedAnalysis) {
  try {
    // Generate a more comprehensive monthly performance report
    const template = generateMonthlyReportTemplate(options, analysisData);
    
    const { data: result, error } = await supabase.functions.invoke('send-email-summary', {
      body: {
        recipient: options.recipient,
        subject: template.subject,
        html: template.html,
        includeAttachments: options.includeAttachments || true, // Default to including attachments for monthly reports
      }
    });

    if (error) {
      console.error('Monthly report email error:', error);
      throw new Error(`Failed to send monthly report: ${error.message}`);
    }

    return result;
  } catch (err) {
    console.error('Email service error:', err);
    throw err;
  }
}

function generateWeeklySummaryTemplate(options: EmailOptions, data: EnhancedAnalysis): EmailTemplate {
  const subject = options.subject || `Weekly Review Summary - ${options.businessName}`;
  
  // Extract key metrics for the summary
  const topClusters = data.reviewClusters
    .sort((a, b) => b.count - a.count)
    .slice(0, 3);
  
  // Get latest trend (most recent period in historical trends)
  const latestTrend = data.historicalTrends[data.historicalTrends.length - 1] || { 
    period: 'Recent',
    avgRating: 0,
    reviewCount: 0
  };
  
  // Calculate trend direction
  let trendDirection = 'stable';
  if (data.historicalTrends.length >= 2) {
    const prevTrend = data.historicalTrends[data.historicalTrends.length - 2];
    if (latestTrend.avgRating > prevTrend.avgRating + 0.2) {
      trendDirection = 'improving';
    } else if (latestTrend.avgRating < prevTrend.avgRating - 0.2) {
      trendDirection = 'declining';
    }
  }
  
  // Build the HTML template
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #4A6FFF; color: white; padding: 15px; text-align: center;">
        <h1 style="margin: 0;">Weekly Review Summary</h1>
        <p style="margin: 5px 0 0 0;">${options.businessName}</p>
      </div>
      
      <div style="padding: 20px; border: 1px solid #ddd; border-top: none;">
        <h2>Performance Overview</h2>
        
        <div style="display: flex; justify-content: space-between; margin-bottom: 20px;">
          <div style="flex: 1; padding: 10px; background-color: #f5f5f5; margin-right: 10px; text-align: center;">
            <h3 style="margin-top: 0;">Average Rating</h3>
            <p style="font-size: 24px; font-weight: bold;">${latestTrend.avgRating.toFixed(1) || 'N/A'}</p>
          </div>
          
          <div style="flex: 1; padding: 10px; background-color: #f5f5f5; margin-left: 10px; text-align: center;">
            <h3 style="margin-top: 0;">Trend</h3>
            <p style="font-size: 24px; font-weight: bold; color: ${
              trendDirection === 'improving' ? 'green' : 
              trendDirection === 'declining' ? 'red' : 
              'grey'
            }">
              ${trendDirection.charAt(0).toUpperCase() + trendDirection.slice(1)}
            </p>
          </div>
        </div>
        
        <h2>Key Insights</h2>
        <ul>
          ${data.insights.map(insight => `<li>${insight}</li>`).join('')}
        </ul>
        
        <h2>Top Review Clusters</h2>
        <table style="width: 100%; border-collapse: collapse; margin-top: 15px;">
          <tr style="background-color: #f5f5f5;">
            <th style="padding: 10px; text-align: left; border: 1px solid #ddd;">Cluster</th>
            <th style="padding: 10px; text-align: center; border: 1px solid #ddd;">Reviews</th>
            <th style="padding: 10px; text-align: center; border: 1px solid #ddd;">Keywords</th>
          </tr>
          ${topClusters.map(cluster => `
            <tr>
              <td style="padding: 10px; border: 1px solid #ddd;">${cluster.name}</td>
              <td style="padding: 10px; text-align: center; border: 1px solid #ddd;">${cluster.count}</td>
              <td style="padding: 10px; text-align: center; border: 1px solid #ddd;">${cluster.keywords.slice(0, 3).join(', ')}</td>
            </tr>
          `).join('')}
        </table>
        
        <div style="margin-top: 30px; text-align: center;">
          <a href="#" style="display: inline-block; padding: 10px 20px; background-color: #4A6FFF; color: white; text-decoration: none; border-radius: 4px;">
            View Full Report
          </a>
        </div>
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; text-align: center;">
          <p>This report was generated by Star-Gazer Analysis.</p>
        </div>
      </div>
    </div>
  `;
  
  return { subject, html };
}

function generateMonthlyReportTemplate(options: EmailOptions, data: EnhancedAnalysis): EmailTemplate {
  const subject = options.subject || `Monthly Performance Report - ${options.businessName}`;
  
  // Extract insights and trends
  const insights = data.insights;
  
  // Get seasonal data
  const seasonalData = data.seasonalAnalysis.map(season => ({
    name: season.season,
    avgRating: season.avgRating,
    count: season.count
  }));
  
  // Get best and worst seasonal performance
  const bestSeason = seasonalData.sort((a, b) => b.avgRating - a.avgRating)[0];
  const worstSeason = seasonalData.sort((a, b) => a.avgRating - b.avgRating)[0];
  
  // Calculate review cluster sentiment
  const sentimentBreakdown = {
    positive: data.reviewClusters.filter(c => c.sentiment === 'positive').length,
    neutral: data.reviewClusters.filter(c => c.sentiment === 'neutral').length,
    negative: data.reviewClusters.filter(c => c.sentiment === 'negative').length
  };
  
  // Build the HTML template for a more comprehensive monthly report
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #4A6FFF; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0;">Monthly Performance Report</h1>
        <p style="margin: 5px 0 0 0;">${options.businessName} | ${new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</p>
      </div>
      
      <div style="padding: 30px; border: 1px solid #ddd; border-top: none;">
        <div style="background-color: #F8F9FA; padding: 20px; margin-bottom: 30px;">
          <h2 style="margin-top: 0; color: #333;">Executive Summary</h2>
          <p>This report provides a comprehensive overview of your business's performance based on customer reviews over the past month.</p>
          <div style="display: flex; justify-content: space-between; margin-top: 20px;">
            <div style="flex: 1; text-align: center; padding: 15px;">
              <p style="font-size: 14px; color: #666; margin-bottom: 5px;">Total Reviews</p>
              <p style="font-size: 28px; font-weight: bold; margin: 0;">
                ${data.reviewClusters.reduce((sum, cluster) => sum + cluster.count, 0)}
              </p>
            </div>
            <div style="flex: 1; text-align: center; padding: 15px;">
              <p style="font-size: 14px; color: #666; margin-bottom: 5px;">Avg Rating</p>
              <p style="font-size: 28px; font-weight: bold; margin: 0;">
                ${data.historicalTrends[data.historicalTrends.length - 1]?.avgRating.toFixed(1) || 'N/A'}
              </p>
            </div>
            <div style="flex: 1; text-align: center; padding: 15px;">
              <p style="font-size: 14px; color: #666; margin-bottom: 5px;">Top Theme</p>
              <p style="font-size: 18px; font-weight: bold; margin: 0;">
                ${data.reviewClusters.sort((a, b) => b.count - a.count)[0]?.name || 'N/A'}
              </p>
            </div>
          </div>
        </div>
        
        <div style="margin-bottom: 30px;">
          <h2 style="color: #333; border-bottom: 2px solid #eee; padding-bottom: 10px;">Key Insights</h2>
          <ul style="padding-left: 20px; line-height: 1.6;">
            ${insights.map(insight => `<li style="margin-bottom: 10px;">${insight}</li>`).join('')}
          </ul>
        </div>
        
        <div style="display: flex; gap: 20px; margin-bottom: 30px;">
          <div style="flex: 1; background-color: #E8F5E9; padding: 20px; border-radius: 4px;">
            <h3 style="margin-top: 0; color: #2E7D32;">Positive Themes</h3>
            <ul style="padding-left: 20px; margin-bottom: 0;">
              ${data.reviewClusters
                .filter(c => c.sentiment === 'positive')
                .slice(0, 3)
                .map(c => `<li style="margin-bottom: 8px;">${c.name}: ${c.keywords.slice(0, 3).join(', ')}</li>`)
                .join('')}
            </ul>
          </div>
          
          <div style="flex: 1; background-color: #FFEBEE; padding: 20px; border-radius: 4px;">
            <h3 style="margin-top: 0; color: #C62828;">Improvement Areas</h3>
            <ul style="padding-left: 20px; margin-bottom: 0;">
              ${data.reviewClusters
                .filter(c => c.sentiment === 'negative')
                .slice(0, 3)
                .map(c => `<li style="margin-bottom: 8px;">${c.name}: ${c.keywords.slice(0, 3).join(', ')}</li>`)
                .join('')}
            </ul>
          </div>
        </div>
        
        <div style="margin-bottom: 30px;">
          <h2 style="color: #333; border-bottom: 2px solid #eee; padding-bottom: 10px;">Seasonal Performance</h2>
          
          <div style="margin-top: 15px;">
            <p><strong>Best performing season:</strong> ${bestSeason?.name || 'N/A'} (${bestSeason?.avgRating.toFixed(1) || 'N/A'} stars)</p>
            <p><strong>Lowest performing season:</strong> ${worstSeason?.name || 'N/A'} (${worstSeason?.avgRating.toFixed(1) || 'N/A'} stars)</p>
          </div>
        </div>
        
        <div style="text-align: center; margin-top: 40px;">
          <a href="#" style="display: inline-block; padding: 12px 24px; background-color: #4A6FFF; color: white; text-decoration: none; border-radius: 4px; font-weight: bold;">
            View Detailed Dashboard
          </a>
        </div>
        
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; text-align: center;">
          <p>This report was generated by Star-Gazer Analysis.</p>
        </div>
      </div>
    </div>
  `;
  
  return { subject, html };
}
